Annotation in JAVA is used to represent supplemental information. As you have seen @override, @inherited, etc are an example of annotations in general Java language. For deep dive please refer to Annotations in Java. In this article, we will discuss annotations referred to hibernate. So, the motive of using a hibernate is to skip the SQL part and focus on core java concepts. Generally, in hibernate, we use XML mapping files for converting our POJO classes data to database data and vice-versa. But using XML becomes a little confusing so, in replacement of using XML, we use annotations inside our POJO classes directly to declare the changes. Also using annotations inside out POJO classes makes things simple to remember and easy to use. Annotation is a powerful method of providing metadata for the database tables and also it gives brief information about the database table structure and also POJO classes simultaneously. Here are some annotations used in our POJO specifically for hibernate-

Annotations

Use of annotations

@Entity 	Used for declaring any POJO class as an entity for a database
@Table	
Used to change table details, some of the attributes are-

name – override the table name
schema
catalogue
enforce unique constraints
@Id	Used for declaring a primary key inside our POJO class
@GeneratedValue	Hibernate automatically generate the values with reference to the internal sequence and we don’t need to set the values manually.
@Column	
It is used to specify column mappings. It means if in case we don’t need the name of the column that we declare in POJO but we need to refer to that entity you can change the name for the database table. Some attributes are-

Name – We can change the name of the entity for the database
length – the size of the column mostly used in strings
unique – the column is marked for containing only unique values
nullable – The column values should not be null. It’s marked as NOT
@Transient	Tells the hibernate, not to add this particular column
@Temporal	This annotation is used to format the date for storing in the database
@Lob	Used to tell hibernate that it’s a large object and is not a simple object
@OrderBy	
This annotation will tell hibernate to OrderBy as we do in SQL.

For example – we need to order by student firstname in ascending order

@OrderBy(“firstname asc”) 

